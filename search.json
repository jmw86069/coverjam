[{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jmw86069.github.io/coverjam/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jmw86069.github.io/coverjam/TODO.html","id":null,"dir":"","previous_headings":"","what":"TODO 13nov2023","title":"TODO 13nov2023","text":"Migrate fully functional nmatlist2heatmaps() supporting functions. Plan shell script wrapper function similar slicejam: setup_coverjam() creates bash shell script define RHOME, wrappers call Rscript calls .R file, calls .Rmd Create run_coverjam.R file renders .Rmd file. Create coverjam_analysis.Rmd create coverage heatmaps.","code":""},{"path":"https://jmw86069.github.io/coverjam/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James M. Ward. Author, maintainer. Nolan G. Gokey. Contributor.","code":""},{"path":"https://jmw86069.github.io/coverjam/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ward J (2023). coverjam: Package (One Line, Title Case). R package version 0.0.1.9000, https://jmw86069.github.io/coverjam/.","code":"@Manual{,   title = {coverjam: What the Package Does (One Line, Title Case)},   author = {James M. Ward},   year = {2023},   note = {R package version 0.0.1.9000},   url = {https://jmw86069.github.io/coverjam/}, }"},{"path":"https://jmw86069.github.io/coverjam/cli-planning.html","id":"id_07sep2023","dir":"","previous_headings":"","what":"07sep2023","title":"NA","text":"Plan command-line interface. Two options. RMarkdown workflow, shell script wrapper. Shell script needs “installed” user installed coverjam. detects RHOME R_LIBS script call Rscript correct R executable, user’s R library files, therefore “portable” script can called anybody else without install R R package dependencies. shell script calls Rscript render .Rmd file. User needs supply config file, command-line arguments way. tool viash.io can create command-line executable. requires Java. See funkyheatmap example deploying executables re-use. optionally creates Docker Nextflow files.","code":""},{"path":"https://jmw86069.github.io/coverjam/index.html","id":"coverjam","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal coverjam provide flexible methods create genome sequence coverage heatmaps. heatmaps typically represent sequence coverage (depth): around central genome feature, transcript start site (TSS) ChIP-seq/ATAC-seq peaks, across scaled genome region, gene locus “body” defined transcript start site (TSS) transcript termination site (TTS). package mainly wrapper around fantastic Bioconductor packages EnrichedHeatmap extends ComplexHeatmap render heatmap. coverjam package provides additional methods: import coverage matrix data multiple files define color gradients heatmap optionally handle coverage data group, applies consistent numerical scales heatmap corresponding meta-profile plot optionally apply row clustering k-means hierarchical clustering; offering correlation additional distance metric optionally split rows aforementioned clustering, /optional row annotations display row annotations alongside heatmaps, order present additional context data displayed, example chromosome, genome region type, additional metrics RNA-seq fold changes, etc. optionally apply numeric transformations (log2p1, sqrt, none) optionally sort rows additional annotation, enriched signal using EnrichedHeatmap metric. Finally, coverjam intends provide re-usable command-line tool: apply RMarkdown workflow set coverage files, driven configuration file used customize colors, numerical scales dimensions method independent user’s R environment, instead using R environment installing user, setting appropriate R_LIBS RHOME variables ensure correct R used.","code":""},{"path":"https://jmw86069.github.io/coverjam/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version coverjam :","code":"# install.packages(\"remotes\") remotes::install_github(\"jmw86069/coverjam\")"},{"path":"https://jmw86069.github.io/coverjam/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"What the Package Does (One Line, Title Case)","text":"methods migrated platjam package, package focused maintenance.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/color_complement.html","id":null,"dir":"Reference","previous_headings":"","what":"Create color complement by rotating the color hue — color_complement","title":"Create color complement by rotating the color hue — color_complement","text":"Create color complement rotating color hue","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/color_complement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create color complement by rotating the color hue — color_complement","text":"","code":"color_complement(   color,   Hflip = 180,   Cfloor = NULL,   Crange = c(80, 100),   Lrange = c(50, 85),   preset = \"dichromat\",   useWarpHue = TRUE,   ... )"},{"path":"https://jmw86069.github.io/coverjam/reference/color_complement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create color complement by rotating the color hue — color_complement","text":"color character vector R compatible colors. Hflip numeric value degrees (0 360) added color hue produce final color hue. Typically 180 degrees select color opposite input color virtual color wheel. Note warpHue=TRUE also enables customized color wheel. Cfloor numeric value used limit output chroma C values minimum value, ensure minimum color saturation. Lrange numeric vector allowed range output luminance L values. supplied, output values simply forced range scaling intermediate values. useWarpHue logical indicating whether use warp hue functions colorjam::h2hw() colorjam::hw2h() effectively change color wheel red-green-blue red-yellow-blue. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/color_complement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create color complement by rotating the color hue — color_complement","text":"function rotates color hue create complementary color color input. differs standard methods using warped color hue default (useWarpHue=TRUE), uses red-yellow-blue color wheel instead R default red-green-blue. also imposes minimum chroma, ensures output color reasonably high color saturation.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/color_complement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create color complement by rotating the color hue — color_complement","text":"","code":"n <- 5; rc <- colorjam::rainbowJam(n); rc_comp <- color_complement(rc); rc_comp2 <- color_complement(rc, useWarpHue=FALSE); jamba::showColors(list(rainbowJam=rc,    `complement\\n(preset=\"dichromat\")`=rc_comp,    `complement\\n(useWarpHue=FALSE)`=rc_comp2));   rc <- colorjam::rainbowJam(n, preset=\"ryb\"); rc_comp <- color_complement(rc, preset=\"ryb\"); rc_comp2 <- color_complement(rc, useWarpHue=FALSE); jamba::showColors(list(`rainbowJam\\n(preset=\"ryb\")`=rc,    `complement\\n(preset=\"ryb\")`=rc_comp,    `complement\\n(useWarpHue=FALSE)`=rc_comp2));   ## divergent color gradients through white ## hint: use higher lens value to make middle colors more intense rc <- colorjam::rainbowJam(n); rc_comp <- color_complement(rc); rc_ramps <- lapply(jamba::nameVector(seq_along(rc)), function(i){    j <- jamba::getColorRamp(c(rc[i], \"white\", rc_comp[i]),       n=25,       lens=0,       divergent=TRUE);    names(j) <- \"\";    names(j)[1] <- \"original colors\";    names(j)[25] <- \"color complements\";    j; }); jamba::showColors(rc_ramps, groupCellnotes=TRUE, groupByColors=FALSE);   ## divergent color gradients through black ## hint: use higher lens value to make middle colors more intense rc_ramps2 <- lapply(jamba::nameVector(seq_along(rc)), function(i){    j <- jamba::getColorRamp(c(rc[i], \"black\", rc_comp[i]),       n=25,       lens=1,       divergent=TRUE);    names(j) <- \"\";    names(j)[1] <- \"original colors\";    names(j)[25] <- \"color complements\";    j; }); jamba::showColors(rc_ramps2, groupCellnotes=TRUE, groupByColors=FALSE);"},{"path":"https://jmw86069.github.io/coverjam/reference/coverage_matrix2nmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Import genome coverage matrix files — coverage_matrix2nmat","title":"Import genome coverage matrix files — coverage_matrix2nmat","text":"Import genome coverage matrix files","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/coverage_matrix2nmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import genome coverage matrix files — coverage_matrix2nmat","text":"","code":"coverage_matrix2nmat(   x = NULL,   filename = NULL,   signal_name = NULL,   target_name = \"target\",   background = 0,   smooth = FALSE,   target_is_single_point = FALSE,   signal_is_categorical = FALSE,   mat_grep = \"[-0-9]+:[-0-9]+\",   upstream_grep = \"^[-]\",   downstream_grep = \"^[^-]\",   target_grep = \"^0$\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/coverjam/reference/coverage_matrix2nmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import genome coverage matrix files — coverage_matrix2nmat","text":"x data.frame compatible object containing genome coverage data, character file path. x supplied, filename used import data. x filename, used populate filename, data imported x. filename character path genome coverage file. x supplied, argument ignored. filename used, first file imported. signal_name name signal regions. used printing object. signal_name NULL, signal_name derived names(filename) available, basename(filename), \"signal\" x supplied. target_name name target names. used printing object. background numeric value containing background value matrix. smooth logical whether apply smoothing rows. target_is_single_point, signal_is_categorical logical indicating whether target region single point, whether signal matrix categorical, respectively. mat_grep character regular expression pattern used identify colnames contain coverage data. default pattern expects format \"-200:-100\". upstream_grep character regular expression pattern used identify upstream colnames values match mat_grep. default assumes region beginning \"-\" negative upstream central target region. downstream_grep character regular expression pattern used identify upstream colnames values match mat_grep. default assumes colnames upstream therefore downstream. target_grep character regular expression pattern used identify colname referring target, default can \"0\". Otherwise, target region defined. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/coverage_matrix2nmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import genome coverage matrix files — coverage_matrix2nmat","text":"normalizedMatrix numeric matrix, additional metadata stored object attributes. See EnrichedHeatmap::.normalizedMatrix() details metadata. rownames defined first colname match mat_grep, default \"Gene ID\", otherwise rownames NULL.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/coverage_matrix2nmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import genome coverage matrix files — coverage_matrix2nmat","text":"function imports genome coverage data matrix returns object class normalizedMatrix compatible use package \"EnrichedHeatmap\". conversion function EnrichedHeatmap::.normalizedMatrix(), however function call function, favor defining attributes directly. future, function may change call function.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/deepTools_matrix2nmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Import deepTools coverage matrix to normalizedMatrix format — deepTools_matrix2nmat","title":"Import deepTools coverage matrix to normalizedMatrix format — deepTools_matrix2nmat","text":"Import deepTools coverage matrix normalizedMatrix format","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/deepTools_matrix2nmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import deepTools coverage matrix to normalizedMatrix format — deepTools_matrix2nmat","text":"","code":"deepTools_matrix2nmat(   x = NULL,   filename = NULL,   signal_name = NULL,   target_name = \"target\",   background = 0,   smooth = FALSE,   target_is_single_point = FALSE,   signal_is_categorical = FALSE,   mat_grep = \"[-0-9]+:[-0-9]+\",   upstream_grep = \"^[-]\",   downstream_grep = \"^[^-]\",   target_grep = \"^0$\",   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/coverjam/reference/deepTools_matrix2nmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import deepTools coverage matrix to normalizedMatrix format — deepTools_matrix2nmat","text":"function active development.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/get_nmat_ceiling.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate signal ceiling of numeric matrix — get_nmat_ceiling","title":"Calculate signal ceiling of numeric matrix — get_nmat_ceiling","text":"Calculate signal ceiling numeric matrix, called internally nmatlist2heatmaps().","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/get_nmat_ceiling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate signal ceiling of numeric matrix — get_nmat_ceiling","text":"","code":"get_nmat_ceiling(imat, iceiling = NULL, verbose = TRUE, ...)"},{"path":"https://jmw86069.github.io/coverjam/reference/get_nmat_ceiling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate signal ceiling of numeric matrix — get_nmat_ceiling","text":"imat numeric matrix normalizedMatrix object. iceiling numeric maximum value, interpreted absolute threshold value 1, interpreted quantile threshold value 0 greater 1. iceiling=NULL iceiling=NA numeric maximum observed value used ceiling. verbose logical indicating whether print verbose output. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/get_nmat_ceiling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate signal ceiling of numeric matrix — get_nmat_ceiling","text":"function called nmatlist2heatmaps() intended called directly. takes normalizedMatrix numeric matrix object, ceiling value iceiling determines appropriate numeric ceiling following rules: iceiling=NULL iceiling=NA returns highest absolute value imat. iceiling > 0 iceiling <= 1, calculates quantile absolute values observed, using non-zero values quantile(abs(imat), probs=iceiling) otherwise iceiling interpreted fixed numeric ceiling cases, iceiling rounded 3 digits round(iceiling, digits=3) Also cases, na.rm=TRUE used, prevent returning NA.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Get appropriate numeric transformation function — get_numeric_transform","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"Get appropriate numeric transformation function","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"","code":"get_numeric_transform(transform, ...)"},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"transform one following formats: character string matching recognized transformation: \"log2signed\" \"exp2signed\" \"sqrt\" \"square\" \"cubert\" \"cube\" \"qrt\", \"quadrt\" \"frt\", \"fthrt\" recognized mathematical function names (scope), log(), log10(), etc. function retrieved get() can used, provided returns data dimensions provided. function: function applied numeric matrix additional modifications. expected return numeric matrix exact dimensions. list contains series values either character function described . ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"function NULL matching function found, list returned input transform multiple values.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"function recognizes numeric transformation functions name, searches attached R package environments matching function name. Recognized transform names: \"none\" \"linear\" returns data without change \"log2signed\" applies jamba::log2signed(), defined log2(1+x) transform absolute value, multiplies original sign(x) \"exp2signed\" applies inverse \"log2signed\", exponentiates numeric values previously transformed log2(1+x). Note value=0 exponentiated becomes +1 \"sqrt\" applies square root transform, equivalent sqrt() \"cubert\" applies cube root x^(1/3) \"qrt\" applies fourth root x^(1/4) \"frt\" \"fthrt\" applies fifth root x^(1/5) \"square\" applies x^2 absolute value, multiplied sign(x) \"cube\" applies x^3; character name used find function name, function found used. function expected take input x return corresponding output length input. function max() fit criteria, function log2() acceptable.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/get_numeric_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get appropriate numeric transformation function — get_numeric_transform","text":"","code":"get_numeric_transform(\"log2signed\") #> function (x, offset = 1, base = 2, ...)  #> { #>     if (length(x) == 0) { #>         return(x) #>     } #>     if (offset < 1 && any(abs(x) < 1)) { #>         stop(paste0(\"Values in abs(x) less than offset \", offset,  #>             \" cannot be transformed without losing direction.\")) #>     } #>     x_sign <- sign(x) #>     if (length(base) == 0 || all(unique(base) == 2)) { #>         return(log2(abs(x) + offset) * x_sign) #>     } #>     log(abs(x) + offset, base = base) * x_sign #> } #> <bytecode: 0x55b524785068> #> <environment: namespace:jamba>  transform_list <- get_numeric_transform(    c(\"none\",    \"log2signed\",    log2,    sqrt)); jamba::sdim(transform_list); #>            rows    class #> none          1 function #> log2signed    1 function #> log2          1 function #> sqrt          1 function  x <- jamba::nameVector(0:16); transform_list[[1]](x) #>  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16  #>  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16   transform_list[[2]](x) #>        0        1        2        3        4        5        6        7  #> 0.000000 1.000000 1.584963 2.000000 2.321928 2.584963 2.807355 3.000000  #>        8        9       10       11       12       13       14       15  #> 3.169925 3.321928 3.459432 3.584963 3.700440 3.807355 3.906891 4.000000  #>       16  #> 4.087463"},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Make multiple coverage heatmaps — nmatlist2heatmaps","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"Make multiple coverage heatmaps","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"","code":"nmatlist2heatmaps(   nmatlist,   panel_groups = NULL,   title = NULL,   title_gp = grid::gpar(fontsize = 14),   caption = NULL,   upstream_length = NULL,   downstream_length = NULL,   k_clusters = 0,   min_rows_per_k = 100,   k_subset = NULL,   k_colors = NULL,   k_width = grid::unit(5, \"mm\"),   k_method = c(\"correlation\", \"euclidean\", \"pearson\", \"spearman\"),   k_heatmap = main_heatmap,   partition = NULL,   rows = NULL,   row_order = NULL,   nmat_colors = NULL,   middle_color = \"white\",   nmat_names = NULL,   main_heatmap = NULL,   anno_df = NULL,   byCols = NULL,   color_sub = NULL,   anno_row_marks = NULL,   anno_row_labels = NULL,   anno_row_gp = grid::gpar(fontsize = 14),   top_annotation = NULL,   top_anno_height = grid::unit(3, \"cm\"),   top_axis_side = c(\"right\"),   legend_max_ncol = 2,   legend_base_nrow = 12,   legend_max_labels = 40,   show_heatmap_legend = TRUE,   heatmap_legend_param = NULL,   heatmap_legend_direction = \"horizontal\",   annotation_legend_param = NULL,   hm_nrow = 1,   transform = \"none\",   transform_label = NULL,   signal_ceiling = NULL,   axis_name = NULL,   axis_name_gp = grid::gpar(fontsize = 10),   axis_name_rot = 90,   column_title_gp = grid::gpar(fontsize = 14),   lens = -2,   anno_lens = 8,   pos_line = FALSE,   seed = 123,   ht_gap = grid::unit(3, \"mm\"),   profile_value = c(\"mean\", \"sum\", \"abs_mean\", \"abs_sum\"),   ylims = NULL,   border = TRUE,   iter.max = 20,   use_raster = TRUE,   raster_quality = 1,   raster_by_magick = TRUE,   do_plot = TRUE,   legend_width = grid::unit(3, \"cm\"),   trim_legend_title = TRUE,   padding = grid::unit(c(0.1, 0.1, 0.1, 0.1), \"cm\"),   return_type = c(\"heatmaplist\", \"grid\"),   show_error = FALSE,   verbose = FALSE,   ... )"},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"nmatlist list containing normalizedMatrix objects, usually output coverage_matrix2nmat(). panel_groups character vector values nmatlist entry, defines groups heatmap panels. panel group shares: numeric range heatmap color gradient, defined first signal_ceiling value group. Standard rules apply, values 1 represent quantile signal threshold, values 1 represent fixed numeric threshold. one color key, labeled names(panel_groups) represent panels group ylim y-axis range profile plot, either determined dynamically first ylim provided panel group nmat_colors defined, panel group assigned one categorical color applied heatmaps group. nmat_colors defined, panel uses color defined, however color key uses color gradient first panel group. title, caption character string used overall title caption, respectively, displayed top heatmap output. upstream_length, downstream_length numeric optional range coordinates display across heatmaps. argument intended input nmatlist contains wider range coordinates displayed. columns nmatlist subset retain columns within range downstream_length upstream_length, assuming middle coordinate zero. step calls zoom_nmatlist(). Note step expand displayed region. k_clusters integer number k-means clusters use partition heatmap. Use 0 NULL clustering. Note k_clusters can vector, case applied across unique groupings defined partition provided. case unique values partition defined names(k_clusters) assigned name, otherwise k_clusters recycled number unique partition values, assigned order. partition factor order honor levels(partition). min_rows_per_k numeric minimum rows required per k-means cluster, used k_clusters greater 1. default min_rows_per_k=10, partition 100 fewer rows can k=1, partition 101 rows can k=2. limit protects k-means clustering small partitions. k_subset integer vector k-means clusters retain. argument intended \"zoom \" one k-means clusters interest drill technique. k_clusters partition provided, argument must exactly match row title displayed heatmap. k_colors character vector R colors, NULL use output colorjam::rainbowJam(k_clusters). k_width unit width k-means cluster color bar, used k_clusters. k_method character string indicating distance used k-means, common default \"euclidean\", however useful alternative sequence coverage data \"correlation\" implemented amap::Kmeans(). Available methods: \"euclidean\" (default) calculates typical Euclidean distance, tends emphasize total signal moreso specific shape signal. \"correlation\" R package amap available, method emphasizes shape signal profiles, particularly effective. also called \"centered Pearson\" since data centered prior calculating correlation. \"pearson\" R package amap available, method also called \"centered Pearson\" since data centered prior calculating correlation. \"spearman\" R package amap available, method computes distance based upon rank differences. tested much context. k_heatmap integer one values indicating nmatlist entries use k-means clustering, used k_clusters greater 1. argument useful applying clustering across multiple coverage heatmaps. partition character factor vector used split rows matrix nmatlist, named rownames. value converted factor, honor provided factor levels. partition k_clusters defined, data first grouped partition partition group separately k-means clustered, using rules described k_clusters min_rows_per_k. Colors assigned partition value, colors split k clusters using jamba::color2gradient(). rows character optional vector rownames subset nmatlist; integer vector row index values. Note even using subset rows data may also subset based upon available names(partition) rownames(anno_df). row_order integer vector used order rows, intended allow ordering data based upon specific heatmap, using different logic default. row_order=NULL (default) TRUE calls EnrichedHeatmap::enriched_score() using data main_heatmap. function generates weighted score heighest weight center position, progressively lower weight working outward maximum distance zero weight. technique sorts signal emphasizes highest enriched signal center matrix. row_order=FALSE data ordered order appear nmatlist, anno_df byCols supplied, rows anno_df sorted using jamba::mixedSort(anno_df, byCols=byCols) resulting row order used. nmat_colors character vector R colors, colorize heatmap. nmat_colors=NULL (default) panel_groups defined, colorjam::rainbowJam() used assign one unique color heatmap panel. nmat_colors=NULL panel_groups defined, colorjam::rainbowJam() used assign one unique color unique panel group, color applied heatmap panel panel group. middle_color character R color, default middle_color=\"white\", used middle color creating divergent color gradient. color usually either \"white\" \"black\", sometimes can slightly -white -black apply distinction background color. nmat_names character vector, NULL, optional, used custom names heatmap nmatlist. nmat_names=NULL signal_name values used nmatlist entry attribute: attr(nmat, \"signal_name\") main_heatmap integer index define one entries nmatlist main heatmap used clustering row ordering. Note k_heatmap override option provided. default main_heatmap=NULL cause heatmaps used row ordering. anno_df data.frame object can coerced data.frame whose rownames(anno_df) must match rownames nmatlist data. rownames(anno_df) match, function fails error message. Data can optionally sorted defining byCols. provided, data nmatlist automatically subsetted matching rownames(anno_df) also present nmatlist. rows also defined, data subsetted rows rownames(anno_df) present nmatlist. byCols character vector colnames(anno_df) used sort data.frame. argument passed jamba::mixedSortDF() follows rules, example prefix \"-\" causes column sorted reverse. Multiple columns can sorted, order provided, factor levels honored factor columns. color_sub accepts input two forms: character vector R colors named character values list output design2colors() list element named colnames present anno_df, list value either: character vector colors named character value, color function defined circlize::colorRamp2(), takes numeric value returns character R color. values column anno_df colors assigned one mechanism , colors assigned using colorjam::group2colors(). partition defined, colors assigned either matching unique partition values names(color_sub), attr(color_sub, \"color_sub\") present, may contain full set name-color assignments color_sub provided list. Otherwise color_sub provided list entry compared partition values values can fully matched. Failing steps, colors assigned unique partition values, k_clusters also supplied, partition colors split colorjam::color2gradient() across k-means clusters partition. anno_row_marks character optional vector rownames nmatlist labeled beside heatmaps using ComplexHeatmap::anno_mark(). Note anno_row_labels can used supply custom labels, one columns anno_df. anno_row_labels=NULL (default) displays value anno_row_marks . anno_row_labels character vector optional labels use anno_row_marks supplied. anno_row_labels=NULL (default) uses rownames defined `anno_row_marks. can character vector actual labels, names match anno_row_marks (thus rownames nmatlist). can character vector one colnames(anno_df), creates labels concatenating values across columns, delimited space \" \". anno_row_gp grid::gpar object used customize text label displayed anno_row_marks defined. default fontsize 14 intended larger default values, legibility. top_annotation HeatmapAnnotation logical list: top_annotation=TRUE (default) uses default EnrichedHeatmap::anno_enriched() display signal profile row partition /k-means cluster. top_annotation=FALSE display top annotation. object HeatmapAnnotation produced ComplexHeatmap::HeatmapAnnotation(EnrichedHeatmap::anno_enriched()) equivalent. form required annotation function called successfully heatmap nmatlist. list objects applied sequentially nmatlist coverage heatmap order, intended allow custom top annotation heatmap. top_anno_height unit object define default height top_annotation. top_annotation defined, default method uses EnrichedHeatmap::anno_enriched() height=top_anno_height. top_axis_side character value indicating side top annotation place y-axis labels. one value defined, recycled across nmatlist. Otherwise used panel_groups defined, top annotation labeled one panel panel group using side defined. Labels displayed contiguous set panel groups, heatmaps panel group can ordered different subsets. Consider panel groups order: , , B, B, , . display one set axis labels first two panels , one axis label next two panels B, one axis label final two panels . Values one : \"left\",\"right\": axis labels side panel group \"\": axis labels sides panel group, useful panel groups fairly large number panels. \"none\": display axis labels \"\": display axis labels every panel even within panel group. legend_max_ncol integer number indicating maximum number columns allowed categorical color legend. legend_base_nrow integer number indicating base number rows used categorical color legend, additional columns added. number elements exceeds (legend_max_ncol * legend_base_nrow) rows added, columns never exceed legend_max_ncol. legend_max_labels integer define maximum labels display color legend. anno_df column contains number categorical colors, legend displayed, order prevent color legend filling entire plot device, thus hiding heatmaps. show_heatmap_legend logical indicating whether display color legend heatmap entry nmatlist. panel_groups supplied, color legends displayed first heatmap unique panel group, unless show_heatmap_legend=FALSE, unless show_heatmap_legend already defined every heatmap. heatmap_legend_param list optional heatmap legend settings. default NULL causes argument defined internally, however provided overrides internal settings used directly. list length(nmatlist), recycled length. heatmap_legend_direction character string used show_heatmap_legend=TRUE heatmap_legend_param already provided. default heatmap_legend_direction=\"horizontal\" displays color gradient legend horizontally continuous scale, labels defined EnrichedHeatmap::EnrichedHeatmap(), width equal grid::unit(1, \"npc\") uses full width color legend area. heatmap_legend_direction=\"vertical\" color legend displayed vertically, width grid::unit(5, \"mm\"). annotation_legend_param list optional parameters passed annotation legend functions, intended provide customization. list named annotation entry customized, annotation entries defined annotation_legend_param use default behavior ComplexHeatmap::HeatmapAnnotation(), assign set colors use default legend parameters default. annotation_legend_param=NULL (default) colors defined, legends displayed using function defaults. labels legend_max_labels color legend hidden annotation legend entry. hm_nrow integer number rows used display heatmap panels. mechanism somewhat experimental, used split large number coverage heatmaps two rows heatmaps. matrix data row order consistent across heatmap panels. annotation data displayed left row heatmap panels. transform one following: character string referring numeric transformation, passed get_numeric_transform(). Commonly used strings: \"log2signed\" calls jamba::log2signed(), applies log2(1+x) absolute value, multiplied sign(x) \"sqrt\" applies square root absolute value, multiplied sign(x) \"cubert\" applies cube root x^(1/3) \"qrt\" applies fourth root x^(1/4) absolute value, multiplied sign(x) function applies numeric transformation. Valid character string values: \"log2signed\" applies jamba::log2signed() applies log2(1+x) transform absolute value, multiplies original sign(x); \"sqrt\" applies square root; \"cubert\" applies cube root x^(1/3); \"qrt\" applies fourth root x^(1/4). negative numeric values, transformation applied absolute value, multiplied original sign. Therefore, transformation applied adjust magnitude values. values passed get_numeric_transform() may information. transform_label character optional vector transformation labels use. transform_label=NULL (default) uses names(transform) present, character string transform, otherwise left blank. transform=\"none\" label displayed. default, transform labels surrounded parentheses, example \"(log2signed)\" placed new line coverage heatmap title. suppress transformation title, supply transform_label=\"\". signal_ceiling numeric vector whose values recycled length length(nmatlist). signal_ceiling defines maximum numeric value color ramp matrix nmatlist. value passed get_nmat_ceiling(), recognizes three numeric forms: signal_ceiling=NULL: (default) maximum absolute value used ceiling. signal_ceiling > 1: specific numeric value applied fixed ceiling, even value maximum absolute value data matrix. setting useful defining fixed meaningful threshold across nmatlist entries. signal_ceiling > 0 signal_ceiling <= 1: numeric value defines quantile threshold calculated using signal data matrix, excluding values zero. example signal_ceiling=0.75 calculates ceiling quantile(x, probs=0.75), using non-zero values. Note ceiling applied color scale underlying data. row clustering row ordering steps use full data range, applying appropriate transform applicable. apply numeric ceiling data , done level nmatlist beforehand. axis_name character string optional custom label used target region label heatmap panel. axis_name=NULL (default), attr(nmat, \"target_name\") label used, usually \"target\", along upstream downstream length stored attr(nmat, \"extend\"). character vector applied center (target) label heatmap, using upstream downstream length stored attr(nmat, \"extend\"). list expected three labels per vector element, corresponding upstream, target, downstream axis label. list recycled length(nmatlist). axis_name_gp object grid::gpar applied x-axis label graphic parameters. example, customize x-axis font size, use form: grid::gpar(fontsize=8). axis_name_rot numeric value either 0 90 indicating whether rotate x-axis names heatmap, axis_name_row=90 (default) rotate labels vertically, axis_name_row=0 display labels horizontally. Note axis_name_rot also controls rotation annotation (anno_df) partition (partition k_clusters) annotation labels, annotation heatmap. column_title_gp object grid::gpar list grid::gpar objects, applied across entries nmatlist customize title displayed heatmap panel. example alter font size, use grid::gpar(fontsize=14). argument passed ComplexHeatmap::Heatmap(), can customized heatmap needed. lens numeric adjustment intensity color gradient, used corresponding nmat_colors entry uses fixed set colors. lens zero create rapid color changes, making gradient visually intense, values zero reduce intensity. lens values recycled length(nmatlist) needed. Note signal_ceiling defines numeric value maximum color applied, lens adjusts intensity intermediate values color gradient. anno_lens numeric value used scale annotation heatmap color scales, see lens details. value applied numeric columns anno_df provided. seed numeric value used set.seed() set random seed. Set NULL avoid running set.seed(). ht_gap unit size specify gap multiple heatmaps. argument passed ComplexHeatmap::draw(). example grid::unit(8, \"mm\") specify 8 millimeters. profile_value character string define type numeric profile display top heatmap. argument passed EnrichedHeatmap::anno_enriched(). Values: \"mean\" mean profile; \"sum\" sum; \"abs_sum\" sum absolute values; \"abs_mean\" mean absolute values. ylims numeric vector maximum y-axis values heatmap profile; list min,max values apply nmatlist entry. border logical indicating whether draw border around heatmap, includes heatmap panels event splitting clustering. border can supplied vector, border can applied specifically heatmap needed. iter.max integer value indicating maximum iterations performed k-means clustering, relevant k_clusters non-zero. use_raster logical indicating whether create heatmaps using raster resizing, almost always recommended TRUE otherwise output sub-optimal. raster_quality logical passed ComplexHeatmap::Heatmap(), used use_raster=TRUE defines level detail retained, used raster_by_magick=FALSE. Using larger numbers decreases speed substantially. raster_by_magick logical passed ComplexHeatmap::Heatmap(), enable ImageMagick use rasterization. default option TRUE disabled R package \"magick\" installed, properly configured. see warning \"instalilng 'magick' improve rasterization\" check R package library(magick) see error messages. \"magick\" available, rasterization substantially slower, may produce files much larger normal. do_plot logical indicating whether draw heatmaps, do_plot=TRUE (default) renders plots normal. do_plot=FALSE return data used create heatmaps without drawing heatmaps. padding grid::unit object used ComplexHeatmap::draw() add whitespace padding around boundaries overall list heatmaps. padding useful enforce extra whitespace, prevent labels exceeding width figure. return_type character string indicating type data return: \"heatmaplist\" returns list heatmaps, can separately arranged together using ComplexHeatmap::draw() grid::grid.draw(). \"grid\" returns grid graphical object may easier render using something like patchwork cowplot R packages. show_error logical indicating whether add error bars profile plot top heatmap. error bars calculated EnrichedHeatmap::anno_enriched() using matrixStats::colSds(x)/nrow(x). verbose logical indicating whether print verbose output. ... additional arguments passed EnrichedHeatmap::EnrichedHeatmap() allow greater customization details. Note many ... arguments also passed ComplexHeatmap::Heatmap().","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"list heatmap components can reviewed, optionally rendered figure: \"AHM\": annotation heatmap \"PHM\": partition heatmap \"EH_l\": list ComplexHeatmap::Heatmap objects \"MHM\": marked heatmap, containing optional row labels \"HM_drawn\": hm_nrow=1 output drawing heatmap, form: ComplexHeatmap::HeatmapList. object can drawn needed, used determine exact row orders. \"fn_params\": list useful function parameters, including calculated processing panel_groups, ylims, signal_ceiling, etc. \"hm_caption\": character captions displayed heatmap \"draw_caption\": function draw heatmap caption bottom-right corner active display device.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"function takes list normalizedMatrix objects, usually output coverage_matrix2nmat(), produces multiple heatmaps using EnrichedHeatmap. function intended convenient wrapper help keep data matrix order, apply consistent clustering filtering across data matrices, enable optional multi-row heatmap layout.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"annotation-data","dir":"Reference","previous_headings":"","what":"Annotation Data","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"anno_df provided data.frame rows synchronized alongside heatmap rows. Column values color-coded, categorical character columns, using color gradient numeric columns. Rows can optionally split argument partition, can vector group values associated rows, one columns colnames(anno_df) whose values used sub-divide rows.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"row-clustering-partitioning","dir":"Reference","previous_headings":"","what":"Row Clustering / Partitioning","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"Rows can clustered using k-means clustering argument k_clusters. default uses k_method=\"correlation\", applies novel effective correlation metric, clustering row data profile shape. typical default, used amap R package installed, use \"euclidean\" distance, tends cluster based upon signal magnitude moreso shape. k-means clustering k_clusters partition enabled, partition independently k-means clustered, improves results compared applying global k-means applying partitions. Use min_rows_per_k adjust relative number k clusters based upon number observed rows.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"display-layout","dir":"Reference","previous_headings":"","what":"Display Layout","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"Heatmaps arranged following order, dependent upon data provided: Annotation heatmap, anno_df provided. Color assignment can provided using color_sub either named vector R colors whose names match values column, list named colnames(anno_df), named color assignments, color function numeric columns. Partition heatmap, partition provided. Enrichment heatmaps, one entry nmatlist. heatmap metaplot, drawn using EnrichedHeatmap::anno_enriched(). partition /k_clusters defined, plot include one profile line row grouping. show_error=TRUE line also shaded using 95% standard deviation. heatmap color gradient applied starting zero, extending signal_ceiling heatmap. signal_ceiling <=1 uses quantile non-zero values matrix data, otherwise applies fixed numeric maximum. Numeric values signal_ceiling threshold colored using maximum color. negative values, color key uses divergent color scale. nmat_colors value heatmap single color, complementary color used negative values; otherwise assumed define divergent color scale. y-axis range metaplots defined observed values, panel_groups defined, y-axis ylim shared among heatmaps panel group. Marked row heatmap, anno_row_marks provided. uses empty heatmap, associated row mark annotations subset row labels, order coverage heatmaps. Color legends displayed order: annotation colors column anno_df partition/cluster colors color gradients coverage heatmap order, panel_groups provided displays color key first heatmap panel group.","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/nmatlist2heatmaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make multiple coverage heatmaps — nmatlist2heatmaps","text":"","code":"## There is a small example file to use for testing # library(jamba) cov_file1 <- system.file(\"data\", \"tss_coverage.matrix\",    package=\"coverjam\"); cov_file2 <- system.file(\"data\", \"h3k4me1_coverage.matrix\",    package=\"coverjam\"); cov_files <- c(cov_file1, cov_file2); names(cov_files) <- gsub(\"[.]matrix\",    \"\",    basename(cov_files)); nmatlist <- lapply(cov_files, coverage_matrix2nmat); nmatlist2heatmaps(nmatlist); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # sometimes data transform can be helpful nmatlist2heatmaps(nmatlist,    transform=c(\"log2signed\", \"sqrt\")); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # k-means clusters, default uses euclidean distance nmatlist2heatmaps(nmatlist, k_clusters=4,    transform=c(\"log2signed\", \"sqrt\")); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # k-means clusters, \"correlation\" or \"pearson\" sometimes works better nmatlist2heatmaps(nmatlist,    k_clusters=4,    k_method=\"pearson\",    transform=c(\"log2signed\", \"sqrt\")); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # example showing usage of top_axis_side # and panel_groups nmatlist2 <- nmatlist[c(1, 1, 1, 2, 2, 2)]; names(nmatlist2) <- jamba::makeNames(names(nmatlist2), suffix=\"_rep\") for (iname in names(nmatlist2)) {    attr(nmatlist2[[iname]], \"signal_name\") <- gsub(\"coverage\", \"cov\", iname); } # top_axis_side=\"left\" # assumes 12x7 figure size nmatlist2heatmaps(nmatlist2,    signal_ceiling=0.8,    nmat_colors=rep(c(\"firebrick\", \"tomato\"), each=3),    panel_groups=rep(c(\"tss\", \"h3k4me1\"), each=3),    ht_gap=grid::unit(4, \"mm\"),    top_axis_side=\"left\",    transform=rep(c(\"log2signed\", \"sqrt\"), each=3)); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # top_axis_side=\"both\" nmatlist2heatmaps(nmatlist2,    panel_groups=rep(c(\"tss\", \"h3k4me1\"), each=3),    ht_gap=grid::unit(6, \"mm\"),    top_axis_side=\"both\",    transform=rep(c(\"log2signed\", \"sqrt\"), each=3)); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # multiple heatmap rows nmatlist2heatmaps(nmatlist2,    transform=rep(c(\"log2signed\", \"sqrt\"), each=3),    k_clusters=4,    k_method=\"pearson\",    panel_groups=rep(c(\"tss\", \"h3k4me1\"), each=3),    ht_gap=grid::unit(6, \"mm\"),    top_axis_side=\"right\",    top_anno_height=grid::unit(1.5, \"cm\"),    hm_nrow=2) #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # invent anno_df data.frame of additional annotations anno_df <- data.frame(    tss_score=EnrichedHeatmap::enriched_score(jamba::log2signed(nmatlist[[1]])),    h3k4me1_score=EnrichedHeatmap::enriched_score(jamba::log2signed(nmatlist[[2]])) ); rownames(anno_df) <- rownames(nmatlist[[1]]); nmatlist2heatmaps(nmatlist,    title=\"k-means clustering across both heatmaps\",    k_clusters=5,    min_rows_per_k=20,    k_method=\"correlation\",    k_heatmap=c(1, 2),    main_heatmap=1,    ht_gap=grid::unit(6, \"mm\"),    top_axis_side=\"left\",    anno_df=anno_df,    transform=rep(c(\"log2signed\", \"sqrt\"), each=3)); #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # example showing k-means clustering together with annotation groups anno_df <- data.frame(    group=sample(c(\"A\", \"B\", \"B\"),       size=nrow(nmatlist[[1]]),       replace=TRUE),    row.names=rownames(nmatlist[[1]])) # note for this example the color legends are oriented vertically # showing how the width is adjusted nmatlist2heatmaps(nmatlist,    heatmap_legend_direction=\"vertical\",    k_clusters=5,    min_rows_per_k=40,    ht_gap=grid::unit(1, \"cm\"),    k_method=\"correlation\",    k_heatmap=1:2,    anno_df=anno_df,    partition=\"group\",    row_title_rot=0) #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # same as above, partition and k_clusters together # except uses multiple values for k_clusters nmatlist2heatmaps(nmatlist,    k_clusters=c(1, 4),    min_rows_per_k=25,    k_heatmap=1:2,    ht_gap=grid::unit(12, \"mm\"),    anno_df=anno_df,    partition=\"group\",    row_title_rot=0) #> Loading required namespace: magick #> Error: 'magick' package should be installed.   # as above, showing custom upstream_length, downstream_length nmatlist2heatmaps(nmatlist,    k_clusters=c(1, 3),    upstream_length=500,    downstream_length=500,    min_rows_per_k=25,    k_heatmap=1:2,    ht_gap=grid::unit(12, \"mm\"),    anno_df=anno_df,    partition=\"group\",    row_title_rot=0) #> Loading required namespace: magick #> Error: 'magick' package should be installed."},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmat.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom the x-axis range for a normalizedMatrix coverage data — zoom_nmat","title":"Zoom the x-axis range for a normalizedMatrix coverage data — zoom_nmat","text":"Zoom x-axis range normalizedMatrix coverage data","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom the x-axis range for a normalizedMatrix coverage data — zoom_nmat","text":"","code":"zoom_nmat(nmat, upstream_length = 500, downstream_length = 500, ...)"},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom the x-axis range for a normalizedMatrix coverage data — zoom_nmat","text":"nmat normalizedMatrix object, length extended target region stored attr(nmat, \"extend\") two-element integer vector representing upstream, downstream length. column indicated attr(nmat, \"upstream_index\") expected represent equal-sized bins spanning range. Columns retained farthest distance column less upstream_length. upstream_length, downstream_length numeric coordinate maximum range target center region. either value NULL threshold applied, equivalent Inf. values forced positive abs(upstream_length) absolute magnitude length target region. ... additional arguments ignored.","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zoom the x-axis range for a normalizedMatrix coverage data — zoom_nmat","text":"function typically called zoom_nmatlist() can called individual normalizedMatrix object. function filters matrix columns distance, updates important associated attributes: attr(nmat, \"upstream_index\") - column index positions upstream target region attr(nmat, \"downstream_index\") - column index positions downstream target region attr(nmat, \"target_index\") - column index positions representing target region attr(nmat, \"extend\") - genomic distance upstream downstream target region","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmatlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Zoom the x-axis range for a list of normalizedMatrix coverage data — zoom_nmatlist","title":"Zoom the x-axis range for a list of normalizedMatrix coverage data — zoom_nmatlist","text":"Zoom x-axis range list normalizedMatrix coverage data","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmatlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zoom the x-axis range for a list of normalizedMatrix coverage data — zoom_nmatlist","text":"","code":"zoom_nmatlist(nmatlist, upstream_length = 500, downstream_length = 500, ...)"},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmatlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zoom the x-axis range for a list of normalizedMatrix coverage data — zoom_nmatlist","text":"nmatlist list normalizedMatrix objects. normalizedMatrix passed zoom_nmat(). upstream_length, downstream_length numeric vector whose values recycled length length(nmatlist). value passed zoom_nmat() matrix can zoomed independent ranges. ... additional arguments passed zoom_nmat().","code":""},{"path":"https://jmw86069.github.io/coverjam/reference/zoom_nmatlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zoom the x-axis range for a list of normalizedMatrix coverage data — zoom_nmatlist","text":"function filters matrix columns distance, updates important associated attributes: attr(nmat, \"upstream_index\") - column index positions upstream target region attr(nmat, \"downstream_index\") - column index positions downstream target region attr(nmat, \"target_index\") - column index positions representing target region attr(nmat, \"extend\") - genomic distance upstream downstream target region","code":""},{"path":[]},{"path":"https://jmw86069.github.io/coverjam/news/index.html","id":"coverjam-001900","dir":"Changelog","previous_headings":"","what":"coverjam 0.0.1.900","title":"coverjam 0.0.1.900","text":"Migrated updated nmatlist2heatmaps() platjam. Migrated zoom_nmat() zoom_nmatlist() platjam.","code":""},{"path":"https://jmw86069.github.io/coverjam/news/index.html","id":"coverjam-000900","dir":"Changelog","previous_headings":"","what":"coverjam 0.0.0.900","title":"coverjam 0.0.0.900","text":"Initial commit. Ported first set functions platjam.","code":""}]
